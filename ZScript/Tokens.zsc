//TODO redelijk gejat van Nashgore - dump ergens in credits?
class KBoom_MonsterToken : Inventory 
{ 
	Default 
	{ 
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		//+INVENTORY.AUTOACTIVATE
	} 
	
	bool bIsDead;
	bool bHasExploded;
	
	double dMonsterStartHealth;
	int iExplosionSize;
	
	int iExplosionDamageMin;
	int iExplosionDamageMax;
	int iExplosionRadius;
	
	override void AttachToOwner(Actor user)
	{
		if (user)
		{
			CalculateMonster(user);
			CalculateExplosion();
		}
		Super.AttachToOwner(user);
	}
	
	
	//TODO OnEffect is efficienter want die werkt alleen als we een owner hebben
	override void Tick(void)
	{
		// no owner => abort
		if (!Owner) return;	
		// owner not dead yet => abort
		if (!bIsDead) return;
		
		// when we get here owner has died
		
		// owner has already exploded => abort
		if (bHasExploded) return;

		// when owner has not yet explode it, explode
		
		bool result;
		Actor a;

		// A_SpawnItemEx returns a tuple of a bool and an Actor, and as you can't directly cast the result to the class we want we have to do a two-step casting
		// silly but it works =/
		[result, a] = Owner.A_SpawnItemEx("KBoom_ExplosionBase");
		
		KBoom_ExplosionBase explosion = KBoom_ExplosionBase(a);
		if (explosion)
		{
			explosion.iExplosionDamageMin = iExplosionDamageMin;
			explosion.iExplosionDamageMax = iExplosionDamageMax;
			explosion.iExplosionRadius = iExplosionRadius;
		}
		
		bHasExploded = true;
	}
	
	// reset all flags when triggered from the eventHandler that our master has risen from the grave
	// this way they can explode again when they go back to the grave!
	void ResetActor(void)
	{
		bIsDead = false;
		bHasExploded = false;
	}
	
	void CalculateMonster(Actor user)
	{
		iExplosionSize = 0;
		dMonsterStartHealth = user.GetSpawnHealth();
			
		if(dMonsterStartHealth <= 200) { iExplosionSize = 1; }
		else if(dMonsterStartHealth <= 800) { iExplosionSize = 2; }
		else if(dMonsterStartHealth <= 1500) { iExplosionSize = 3; }
		else if(dMonsterStartHealth <= 3000) { iExplosionSize = 4; }
		else if(dMonsterStartHealth <= 4000) { iExplosionSize = 5; }
		else { iExplosionSize = 6; }
				
		//Console.Printf("%i", iExplosionSize);
	}
	
	void CalculateExplosion()
	{
		int baseDamageMin = 64;
		int baseDamageMax = 196;
		int baseSize = 96;
		
		//TODO moet geleidelijk oplopen; damage bij hogere iExplosionSize is te laag
		//radius daarintegen wordt te groot; moet cappen op 320 (~3.33x zo groot)
		
		int explosionMult = iExplosionSize - 1;
		if (explosionMult < 1) explosionMult = 1;
		
		iExplosionDamageMin = baseDamageMin * explosionMult;
		iExplosionDamageMax = baseDamageMax * explosionMult;
		iExplosionRadius = baseSize * iExplosionSize;
		
		
        //small	- BEXP D 0 A_Explode(random(1, 50), 96)
        //x1	- BEXP D 0 A_Explode(random(60,220), 96) // demon, spectre, chaingun, imp, soul, shotgun, nazi
        //x2	- BEXP D 0 A_Explode(random(200, 480), 128) // arach, vile, baron, knight, caco, fatso, revenant, pain,
        //x3	- BEXP D 0 A_Explode(random(1200, 6000), 320) // cyber
		//spider mastermind doet 1x x3, 8x x2 en 16x x1
	
	}
}